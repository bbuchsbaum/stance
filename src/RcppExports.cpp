// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_gradient_fista_rcpp
arma::mat compute_gradient_fista_rcpp(const arma::mat& Y_or_WtY, const arma::mat& W, const arma::mat& H_star_X, const arma::vec& hrf_kernel, bool precomputed_WtY, const arma::mat& WtW_precomp);
RcppExport SEXP _stance_compute_gradient_fista_rcpp(SEXP Y_or_WtYSEXP, SEXP WSEXP, SEXP H_star_XSEXP, SEXP hrf_kernelSEXP, SEXP precomputed_WtYSEXP, SEXP WtW_precompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_or_WtY(Y_or_WtYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_star_X(H_star_XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf_kernel(hrf_kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type precomputed_WtY(precomputed_WtYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WtW_precomp(WtW_precompSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gradient_fista_rcpp(Y_or_WtY, W, H_star_X, hrf_kernel, precomputed_WtY, WtW_precomp));
    return rcpp_result_gen;
END_RCPP
}
// compute_gradient_fista_precomp_rcpp
arma::mat compute_gradient_fista_precomp_rcpp(const arma::mat& WtY, const arma::mat& WtW, const arma::mat& H_star_X, const arma::vec& hrf_kernel);
RcppExport SEXP _stance_compute_gradient_fista_precomp_rcpp(SEXP WtYSEXP, SEXP WtWSEXP, SEXP H_star_XSEXP, SEXP hrf_kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type WtY(WtYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type WtW(WtWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_star_X(H_star_XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf_kernel(hrf_kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gradient_fista_precomp_rcpp(WtY, WtW, H_star_X, hrf_kernel));
    return rcpp_result_gen;
END_RCPP
}
// convolve_transpose_rcpp
arma::mat convolve_transpose_rcpp(const arma::mat& X, const arma::vec& hrf, int n_threads);
RcppExport SEXP _stance_convolve_transpose_rcpp(SEXP XSEXP, SEXP hrfSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf(hrfSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_transpose_rcpp(X, hrf, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// estimate_lipschitz_rcpp
double estimate_lipschitz_rcpp(const arma::mat& W, const arma::vec& hrf_kernel, int max_iter, double tol);
RcppExport SEXP _stance_estimate_lipschitz_rcpp(SEXP WSEXP, SEXP hrf_kernelSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf_kernel(hrf_kernelSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_lipschitz_rcpp(W, hrf_kernel, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// convolve_rows_rcpp
arma::mat convolve_rows_rcpp(const arma::mat& X, const arma::vec& hrf, int n_threads);
RcppExport SEXP _stance_convolve_rows_rcpp(SEXP XSEXP, SEXP hrfSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf(hrfSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_rows_rcpp(X, hrf, n_threads));
    return rcpp_result_gen;
END_RCPP
}

// convolve_voxel_hrf_rcpp
arma::cube convolve_voxel_hrf_rcpp(const arma::mat& design, const arma::mat& hrfs, int fft_threshold, int n_threads);
RcppExport SEXP _stance_convolve_voxel_hrf_rcpp(SEXP designSEXP, SEXP hrfsSEXP, SEXP fft_thresholdSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type hrfs(hrfsSEXP);
    Rcpp::traits::input_parameter< int >::type fft_threshold(fft_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_voxel_hrf_rcpp(design, hrfs, fft_threshold, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// fista_tv_rcpp
List fista_tv_rcpp(const arma::mat& WtY, const arma::mat& W, const arma::vec& hrf_kernel, double lambda_tv, double L_fista, const arma::mat& X_init, int max_iter, double tol, bool verbose);
RcppExport SEXP _stance_fista_tv_rcpp(SEXP WtYSEXP, SEXP WSEXP, SEXP hrf_kernelSEXP, SEXP lambda_tvSEXP, SEXP L_fistaSEXP, SEXP X_initSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type WtY(WtYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf_kernel(hrf_kernelSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tv(lambda_tvSEXP);
    Rcpp::traits::input_parameter< double >::type L_fista(L_fistaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_init(X_initSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fista_tv_rcpp(WtY, W, hrf_kernel, lambda_tv, L_fista, X_init, max_iter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_objective_rcpp
double compute_objective_rcpp(const arma::mat& Y, const arma::mat& W, const arma::mat& X, const arma::vec& hrf, double lambda_tv);
RcppExport SEXP _stance_compute_objective_rcpp(SEXP YSEXP, SEXP WSEXP, SEXP XSEXP, SEXP hrfSEXP, SEXP lambda_tvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf(hrfSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tv(lambda_tvSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_objective_rcpp(Y, W, X, hrf, lambda_tv));
    return rcpp_result_gen;
END_RCPP
}
// estimate_lipschitz_lowrank_rcpp
double estimate_lipschitz_lowrank_rcpp(const arma::mat& U, const arma::vec& S, const arma::mat& V, const arma::vec& hrf_kernel);
RcppExport SEXP _stance_estimate_lipschitz_lowrank_rcpp(SEXP USEXP, SEXP SSEXP, SEXP VSEXP, SEXP hrf_kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf_kernel(hrf_kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_lipschitz_lowrank_rcpp(U, S, V, hrf_kernel));
    return rcpp_result_gen;
END_RCPP
}
// compute_WtY_lowrank_rcpp
arma::mat compute_WtY_lowrank_rcpp(const arma::mat& U, const arma::vec& S, const arma::mat& V, const arma::mat& Y);
RcppExport SEXP _stance_compute_WtY_lowrank_rcpp(SEXP USEXP, SEXP SSEXP, SEXP VSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_WtY_lowrank_rcpp(U, S, V, Y));
    return rcpp_result_gen;
END_RCPP
}
// compute_WtW_lowrank_rcpp
arma::mat compute_WtW_lowrank_rcpp(const arma::mat& V, const arma::vec& S);
RcppExport SEXP _stance_compute_WtW_lowrank_rcpp(SEXP VSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_WtW_lowrank_rcpp(V, S));
    return rcpp_result_gen;
END_RCPP

// compute_log_likelihoods_rcpp
arma::mat compute_log_likelihoods_rcpp(const arma::mat& Y_proj, const arma::mat& Vmat, const arma::vec& hrf_kernel, double sigma2);
RcppExport SEXP _stance_compute_log_likelihoods_rcpp(SEXP Y_projSEXP, SEXP VmatSEXP, SEXP hrf_kernelSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_proj(Y_projSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Vmat(VmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hrf_kernel(hrf_kernelSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_log_likelihoods_rcpp(Y_proj, Vmat, hrf_kernel, sigma2));
    return rcpp_result_gen;
END_RCPP
}

// forward_pass_rcpp
List forward_pass_rcpp(const arma::mat& log_lik, const arma::mat& Pi, const arma::vec& pi0);
RcppExport SEXP _stance_forward_pass_rcpp(SEXP log_likSEXP, SEXP PiSEXP, SEXP pi0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type log_lik(log_likSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pi0(pi0SEXP);
    rcpp_result_gen = Rcpp::wrap(forward_pass_rcpp(log_lik, Pi, pi0));
    return rcpp_result_gen;
END_RCPP
}

// backward_pass_rcpp
arma::mat backward_pass_rcpp(const arma::mat& log_lik, const arma::mat& Pi, const arma::vec& c_scale);
RcppExport SEXP _stance_backward_pass_rcpp(SEXP log_likSEXP, SEXP PiSEXP, SEXP c_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type log_lik(log_likSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_scale(c_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_pass_rcpp(log_lik, Pi, c_scale));
    return rcpp_result_gen;
END_RCPP
}

// parallel_glm_fit_rcpp
arma::mat parallel_glm_fit_rcpp(const arma::mat& Y, const arma::mat& X_conv, int n_threads, int chunk_size);
RcppExport SEXP _stance_parallel_glm_fit_rcpp(SEXP YSEXP, SEXP X_convSEXP, SEXP n_threadsSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_conv(X_convSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type chunk_size(chunk_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_glm_fit_rcpp(Y, X_conv, n_threads, chunk_size));
    return rcpp_result_gen;
END_RCPP
}
// parallel_ridge_glm_rcpp
arma::mat parallel_ridge_glm_rcpp(const arma::mat& Y, const arma::mat& X_conv, double lambda, int n_threads, int chunk_size);
RcppExport SEXP _stance_parallel_ridge_glm_rcpp(SEXP YSEXP, SEXP X_convSEXP, SEXP lambdaSEXP, SEXP n_threadsSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_conv(X_convSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type chunk_size(chunk_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_ridge_glm_rcpp(Y, X_conv, lambda, n_threads, chunk_size));
    return rcpp_result_gen;
END_RCPP
}
// check_openmp_support
List check_openmp_support();
RcppExport SEXP _stance_check_openmp_support() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(check_openmp_support());
    return rcpp_result_gen;
END_RCPP
}
// prox_tv_condat_1d
arma::vec prox_tv_condat_1d(const arma::vec& x, double lambda);
RcppExport SEXP _stance_prox_tv_condat_1d(SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_tv_condat_1d(x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// prox_tv_condat_rcpp
arma::mat prox_tv_condat_rcpp(const arma::mat& X, double lambda_tv, int n_threads);
RcppExport SEXP _stance_prox_tv_condat_rcpp(SEXP XSEXP, SEXP lambda_tvSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tv(lambda_tvSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_tv_condat_rcpp(X, lambda_tv, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// compute_tv_rcpp
double compute_tv_rcpp(const arma::mat& X);
RcppExport SEXP _stance_compute_tv_rcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_tv_rcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// prox_tv_dual
arma::vec prox_tv_dual(const arma::vec& x, double lambda, int max_iter, double tol);
RcppExport SEXP _stance_prox_tv_dual(SEXP xSEXP, SEXP lambdaSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_tv_dual(x, lambda, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stance_compute_gradient_fista_rcpp", (DL_FUNC) &_stance_compute_gradient_fista_rcpp, 6},
    {"_stance_compute_gradient_fista_precomp_rcpp", (DL_FUNC) &_stance_compute_gradient_fista_precomp_rcpp, 4},
    {"_stance_convolve_transpose_rcpp", (DL_FUNC) &_stance_convolve_transpose_rcpp, 3},
    {"_stance_estimate_lipschitz_rcpp", (DL_FUNC) &_stance_estimate_lipschitz_rcpp, 4},
    {"_stance_convolve_rows_rcpp", (DL_FUNC) &_stance_convolve_rows_rcpp, 3},
    {"_stance_fista_tv_rcpp", (DL_FUNC) &_stance_fista_tv_rcpp, 9},
    {"_stance_compute_objective_rcpp", (DL_FUNC) &_stance_compute_objective_rcpp, 5},
    {"_stance_estimate_lipschitz_lowrank_rcpp", (DL_FUNC) &_stance_estimate_lipschitz_lowrank_rcpp, 4},
    {"_stance_compute_WtY_lowrank_rcpp", (DL_FUNC) &_stance_compute_WtY_lowrank_rcpp, 4},
    {"_stance_compute_WtW_lowrank_rcpp", (DL_FUNC) &_stance_compute_WtW_lowrank_rcpp, 2},
    {"_stance_compute_log_likelihoods_rcpp", (DL_FUNC) &_stance_compute_log_likelihoods_rcpp, 4},
    {"_stance_parallel_glm_fit_rcpp", (DL_FUNC) &_stance_parallel_glm_fit_rcpp, 4},
    {"_stance_parallel_ridge_glm_rcpp", (DL_FUNC) &_stance_parallel_ridge_glm_rcpp, 5},
    {"_stance_check_openmp_support", (DL_FUNC) &_stance_check_openmp_support, 0},
    {"_stance_prox_tv_condat_1d", (DL_FUNC) &_stance_prox_tv_condat_1d, 2},
    {"_stance_prox_tv_condat_rcpp", (DL_FUNC) &_stance_prox_tv_condat_rcpp, 3},
    {"_stance_compute_tv_rcpp", (DL_FUNC) &_stance_compute_tv_rcpp, 1},
    {"_stance_prox_tv_dual", (DL_FUNC) &_stance_prox_tv_dual, 4},
    {"_stance_convolve_voxel_hrf_rcpp", (DL_FUNC) &_stance_convolve_voxel_hrf_rcpp, 4},
    {"_stance_forward_pass_rcpp", (DL_FUNC) &_stance_forward_pass_rcpp, 3},
    {"_stance_backward_pass_rcpp", (DL_FUNC) &_stance_backward_pass_rcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_stance(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
